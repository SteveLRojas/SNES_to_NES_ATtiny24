.NOLIST
.INCLUDE "tn24def.inc"
.LIST

.DEVICE ATtiny24

.DEF NES = R15
.DEF GEN_COUNT = R16	;USED FOR FULLDELAY_232, HLAFDELAY_232
.DEF DREG = R17	;USED TO STORE RECEIVED DATA
.DEF SNES_HIGH = R18
.DEF SNES_LOW = R19
.DEF TEMP = R20
.DEF MASK = R21
.DEF READ_COUNT = R22
.DEF GEN_COUNT2 = R23
.DEF NES_SHIFT = R24
.DEF NES_TEMP = R25
.EQU fq = 4000000	;XTal frequency definition

; PORT USAGE:
; RXD		PORT A BIT 5	INPUT
; TXD		PORT A BIT 4	OUTPUT
; DEBUG		PORT A BIT 3	OUTPUT
; NES_CLK	PORT A BIT 2	INPUT INTERRUPT (PCINT2)
;SNES_LATCH PORT A BIT 1	OUTPUT
; NES_DATA	PORT A BIT 0	OUTPUT

; RESET	PORT B BIT 3	INPUT
; SNES_DATA PORT B BIT 2	INPUT
; SNES_CLK	PORT B BIT 1	OUTPUT
; NES LATCH PORT B BIT 0	INPUT INTERRUPT (PCINT8)

.CSEG
.ORG $0000
	RJMP	INIT	;RESET VECTOR
	RETI	; External Interrupt Request 0
	RJMP NES_OUT	; Pin Change Interrupt Request 0
	RJMP NES_LATCH	; Pin Change Interrupt Request 1
	RETI	; Watchdog Time-out
	RETI	; Timer/Counter1 Capture Event
	RETI	; Timer/Counter1 Compare Match A
	RETI	; Timer/Counter1 Compare Match B
	RETI	; Timer/Counter1 Overflow
	RETI	; Timer/Counter0 Compare Match A
	RETI	; Timer/Counter0 Compare Match B
	RETI	; Timer/Counter0 Overflow
	RETI	; Analog Comparator
	RETI	; ADC Conversion Complete
	RETI	; EEPROM Ready
	RETI	; USI START
	RETI	; USI Overflow

INIT:
	LDI TEMP, 0b00011011
	OUT DDRA, TEMP	;CONFIGURE PORT A
	LDI TEMP, 0b00000010
	OUT DDRB, TEMP	;CONFIGURE PORT B
	LDI TEMP, 0b10000000
	OUT CLKPR, TEMP	;ENABLE CHANGE OF CLKPS BITS
	LDI TEMP, 0b00000000
	OUT CLKPR, TEMP	;SET CLOCK DIVIDER TO 0 (8MHz)
	LDI TEMP, 0b00110000
	OUT GIMSK, TEMP	;DISABLE INT0, ENABLE PCIE1 AND PCIE0
	LDI TEMP, 0b00000001
	OUT PCMSK1, TEMP	;ENABLE PCINT8
	LDI TEMP, 0b00000100
	OUT PCMSK0, TEMP	;ENABLE PCINT2
	LDI TEMP, 0b10000000
	OUT ACSR, TEMP	;POWER OFF THE ANALOG COMPARATOR AND DISABLE THE INTERRUPT
	LDI NES_SHIFT, 0xFF	;CLEAR ALL BUTTONS
	LDI TEMP, 0xFF
	OUT PORTA, TEMP	;ENABLE PORTA PULLUPS
	SEI	;ENABLE INTERRUPTS
	RJMP MAIN

NES_OUT:
	SBIS PINA, 2	;CHECK IF NES CLOCK IS HIGH
	RETI	;IF NOT THEN THIS WAS TRIGGERED BY A FALLING EDGE AND NOTHING NEEDS TO BE DONE
	CBI PORTA, 0
	SBRC NES_SHIFT, 0
	SBI PORTA, 0	;COPY BIT 0 FROM NES SHIFT TO NES DATA
	LSR NES_SHIFT	;SHIFT NES_SHIFT RIGHT
	SBR TEMP, PCIF0
	OUT GIFR, TEMP	;PREVENT THE INTERRUPT HANDLER FROM BEING CALLED TWICE FOR THE SAME PULSE
	RETI

NES_LATCH:
	SBIS PINB, 0	;CHECK IF NES LATCH IS HIGH
	RETI	;IF NOT THEN THIS WAS TRIGGERED BY A FALLING EDGE AND NOTHING NEEDS TO BE DONE
	CBI PORTA, 0
	SBRC NES, 0
	SBI PORTA, 0	;COPY BIT 0 FROM NES TO NES DATA LINE
	MOV NES_SHIFT, NES	;COPY NEW DATA TO SHIFT REGISTER
	LSR NES_SHIFT	;PREPARE NEXT BIT
	SBR TEMP, PCIF1
	OUT GIFR, TEMP	;PREVENT THE INTERRUPT HANDLER FROM BEING CALLED TWICE FOR THE SAME PULSE
	RETI

SNES_READ:
	CLR SNES_HIGH
	CLR SNES_LOW
	SBI PORTA, 1	;SET LATCH HIGH
	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTA, 1	;CLEAR LATCH
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00000001	;SET BIT 0
	
	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00000010	;SET BIT 1

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00000100	;SET BIT 2

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00001000	;SET BIT 3

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00010000	;SET BIT 4

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B00100000	;SET BIT 5

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B01000000	;SET BIT 6

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_LOW, 0B10000000	;SET BIT 7

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00000001	;SET BIT 0

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00000010	;SET BIT 1

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00000100	;SET BIT 2

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00001000	;SET BIT 3

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00010000	;SET BIT 4

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B00100000	;SET BIT 5

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B01000000	;SET BIT 6

	SBI PORTB, 1	;SET CLK HIGH
	RCALL SNES_DELAY
	CBI PORTB, 1	;CLEAR CLK
	RCALL SNES_DELAY
	SBIC PINB, 2	;CHECK SNES DATA
	SBR SNES_HIGH, 0B10000000	;SET BIT 7
	RET

MAIN:
	RCALL SNES_READ
	MOV NES_TEMP, SNES_LOW	;MOST BITS ARE THE SAME IN NES AND SNES
	ANDI NES_TEMP, 0B11111100	;BUT THE LOW 2 BITS ARE DIFFERENT
	SBRC SNES_HIGH, 0	;CHECK BIT 0 IN SNES HIGH
	ORI NES_TEMP, 0B00000001	;IF BIT 0 IN SNES IS SET THEN SET BIT 0 IN NES
	SBRC SNES_LOW, 0
	ORI NES_TEMP, 0B00000010	;IF BIT 0 IN SNES LOW IS SET THEN SET BIT 1 IN NES
	EOR NES_TEMP, MASK	;MODIFY A AND B
	SBRS SNES_HIGH, 3	;CHECK THE RIGHT BUTTON
	RCALL KONAMI	;IF RIGHT BUTTON IS PRESSED CALL KONAMI MACRO
	SBRS SNES_HIGH, 2	;CHECK THE LEFT BUTTON
	ANDI NES_TEMP, 0b11111110	;IF LEFT BUTTON IS PRESSED THEN PRESS BUTTON A IN NES
	INC READ_COUNT
	CLR MASK
	SBRC SNES_HIGH, 1	;CHECK X BUTTON IN SNES
	RJMP NO_X
	ORI MASK, 0B00000001	;INVERT BUTTON A IN NES
NO_X:
	SBRC SNES_LOW, 1	;CHECK Y BUTTON IN SNES
	RJMP MAIN_TOGGLE
	ORI MASK, 0B00000010	;INVERT BUTTIN B IN NES
MAIN_TOGGLE:
	SBRC READ_COUNT, 7
	CLR MASK	;IF BIT 7 IN READ COUNT IS SET THEN CLEAR MASK
	MOV NES, NES_TEMP	;UPDATE NES REGISTER
	RJMP MAIN

KONAMI:
	LDI NES_TEMP, 0b11101111	;PRESS UP
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b11101111	;PRESS UP
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b11011111	;PRESS DOWN
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b11011111	;PRESS DOWN
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b10111111	;PRESS LEFT
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b01111111	;PRESS RIGHT
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b10111111	;PRESS LEFT
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b01111111	;PRESS RIGHT
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b11111101	;PRESS B
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0b11111110	;PRESS A
	MOV NES, NES_TEMP
	RCALL LONG_DELAY
	LDI NES_TEMP, 0xFF	;CLEAR ALL BUTTONS
	MOV NES, NES_TEMP
	RET


RECEIVE_232:	;DESIGNED FOR 4MHz CLOCK
	CLR DREG
WAIT_232:
	SBIC	PINA, 5
	RJMP	WAIT_232
	RCALL	HALFDELAY_232
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 0
	SBR	DREG, 0B00000001
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 1
	SBR	DREG, 0B00000010
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 2
	SBR	DREG, 0B00000100
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 3
	SBR	DREG, 0B00001000
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 4
	SBR	DREG, 0B00010000
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 5
	SBR	DREG, 0B00100000
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 6
	SBR	DREG, 0B01000000
	RCALL	FULLDELAY_232
	SBIC	PINA, 5	;CHECK BIT 7
	SBR	DREG, 0B10000000
	RCALL	HALFDELAY_232
	RET

SEND_232:	;DESIGNED FOR 4MHz CLOCK
	CBI  PORTA, 4	;SEND STARTING BIT
	RCALL FULLDELAY_232
	SBRC DREG, 0	;TEST BIT 0
	SBI  PORTA, 4	;IF SET IN REGISTER SET TX LINE
	SBRS DREG, 0	;TEST BIT 0
	CBI  PORTA, 4	;IF CLEAR IN REGISTER CLEAR TX LINE
	RCALL TXDELAY_232
	SBRC DREG, 1
	SBI  PORTA, 4
	SBRS DREG, 1
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 2
	SBI  PORTA, 4
	SBRS DREG, 2
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 3
	SBI  PORTA, 4
	SBRS DREG, 3
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 4
	SBI  PORTA, 4
	SBRS DREG, 4
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 5
	SBI  PORTA, 4
	SBRS DREG, 5
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 6
	SBI  PORTA, 4
	SBRS DREG, 6
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBRC DREG, 7
	SBI  PORTA, 4
	SBRS DREG, 7
	CBI  PORTA, 4
	RCALL TXDELAY_232
	SBI  PORTA, 4	;SEND STOP BIT
	RCALL FULLDELAY_232
	RET

HALFDELAY_232:	;DESIGNED FOR 4MHz CLOCK AND 9600 BAUD
	LDI GEN_COUNT, 0x33
HALFDELAY_2232:
	NOP
	DEC GEN_COUNT
	BRNE HALFDELAY_2232
	RET

FULLDELAY_232:	;DESIGNED FOR 4MHz CLOCK AND 9600 BAUD
	LDI GEN_COUNT, 0x66
FULLDELAY_2232:
	NOP
	DEC GEN_COUNT
	BRNE FULLDELAY_2232
	RET

TXDELAY_232:	;DESIGNED FOR 4MHz CLOCK AND 9600 BAUD
	LDI GEN_COUNT, 0x65
TXDELAY_2232:
	NOP
	DEC GEN_COUNT
	BRNE TXDELAY_2232
	RET

SNES_DELAY:
	;LDI GEN_COUNT, 0x14
	LDI GEN_COUNT, 0x2C
SNES_DELAY2:
	DEC GEN_COUNT
	BRNE SNES_DELAY2
	RET

LONG_DELAY:
	LDI GEN_COUNT, 0xFF
	LDI GEN_COUNT2, 0xF0
LONGD2:
	DEC GEN_COUNT
	BRNE LONGD2
	LDI GEN_COUNT, 0xFF
	DEC GEN_COUNT2
	BRNE LONGD2
	LDI GEN_COUNT, 0xFF
	LDI GEN_COUNT2, 0xF0
LONGD3:
	DEC GEN_COUNT
	BRNE LONGD3
	LDI GEN_COUNT, 0xFF
	DEC GEN_COUNT2
	BRNE LONGD3
	RET

.ESEG
	.DB "THIS PROGRAM ADAPTS A SNES JOYPAD TO A NES CONSOLE. *STEVE LOOSER-ROJAS*"

